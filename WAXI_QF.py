# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WAXI_QF
                                 A QGIS plugin
 Supoprt QField usage by WAXI Team
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-31
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Mark Jessell UWA
        email                : mark.jessell@uwa.edu.au
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QDialog
from qgis.core import Qgis, QgsProject, QgsVectorLayer, QgsPoint
import pandas as pd
from qgis.PyQt.QtCore import QVariant
import os

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .WAXI_QF_dialog import WAXI_QFDialog
import os.path
from qgis.core import QgsRectangle, Qgis
from qgis.core.additions.edit import edit
import processing
from qgis.core import (
QgsGeometry,
QgsWkbTypes,
QgsProject,
QgsVectorLayer,
QgsVectorFileWriter,
QgsApplication,
QgsFeature,
QgsVectorDataProvider,
QgsField
)
from scipy.spatial.distance import cdist

import numpy as np
import os
import shutil


class WAXI_QF:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'WAXI_QF_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&WAXI_QF')

        
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('WAXI_QF', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = os.path.dirname(os.path.realpath(__file__))+'/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'WAXI QF'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def mergeProjects(self):
    # Takes two WAXI QFIELD Projects and combines them, 
    # removing duplicates and saves out the full structure to a new directory



        # set up directory structure and load filename lists
        dirs=["0. STOPS-SAMPLING-PHOTOGRAPHS-COMMENTS","1. STRUCTURES","2. LITHOLOGY","3. GEOPHYSICAL MEASUREMENTS","99. CSV FILES"]
        shp_list = self.mynormpath(os.path.dirname(os.path.realpath(__file__))+"/shp.csv")
        csv_list = self.mynormpath(os.path.dirname(os.path.realpath(__file__))+"/csv.csv")
        shps=pd.read_csv(shp_list,names=['name','dir_code'])
        shps=shps.set_index("name")
        csvs=pd.read_csv(csv_list,names=['name'])

        main_project_path = self.dlg.lineEdit_4.text()
        sub_project_path = self.dlg.lineEdit_5.text()
        merge_project_path = self.dlg.lineEdit_6.text()

        if(not os.path.exists(self.mynormpath(merge_project_path))):
            os.mkdir(self.mynormpath(merge_project_path))
        if(not os.path.exists(self.mynormpath(merge_project_path+"/0. FIELD DATA"))):
            os.mkdir(self.mynormpath(merge_project_path+"/0. FIELD DATA"))
        if(not os.path.exists(self.mynormpath(merge_project_path+"/0. FIELD DATA/0. CURRENT MISSION"))):
            os.mkdir(self.mynormpath(merge_project_path+"/0. FIELD DATA/0. CURRENT MISSION"))
        if(not os.path.exists(self.mynormpath(merge_project_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[0]))):
            os.mkdir(self.mynormpath(merge_project_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[0]))
        if(not os.path.exists(self.mynormpath(merge_project_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[1]))):
            os.mkdir(self.mynormpath(merge_project_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[1]))
        if(not os.path.exists(self.mynormpath(merge_project_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[2]))):
            os.mkdir(self.mynormpath(merge_project_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[2]))
        if(not os.path.exists(self.mynormpath(merge_project_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[3]))):
            os.mkdir(self.mynormpath(merge_project_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[3]))        
        if(not os.path.exists(merge_project_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[4])):
            os.mkdir(self.mynormpath(merge_project_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[4]))

        project = QgsProject.instance()  # assumes one of the projects is actually open!  Could use coty stored in plugin?
        proj_file_path=project.fileName()
        head_tail = os.path.split(proj_file_path)
        shutil.copyfile(self.mynormpath(proj_file_path), self.mynormpath(merge_project_path+'/'+head_tail[1]))
        for layer in shps.index.to_list():

            main_layer_path = self.mynormpath(main_project_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[int(shps.loc[layer].dir_code)]+"/"+layer+".shp")
            sub_layer_path = self.mynormpath(sub_project_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[int(shps.loc[layer].dir_code)]+"/"+layer+".shp")
            merge_layer_path = self.mynormpath(merge_project_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[int(shps.loc[layer].dir_code)]+"/"+layer+".shp")
            
            # merge two shapefiles
            params = {
            'LAYERS': [main_layer_path, sub_layer_path],
            'OUTPUT': 'memory:'
            }

            merged_layers=processing.run("native:mergevectorlayers", params )['OUTPUT']
            
            # extract geometries of merged file
            params = { 
            'CALC_METHOD' : 0, 
            'INPUT' :  merged_layers, 
            'OUTPUT' : 'memory:' 
            }

            added_geom=processing.run("qgis:exportaddgeometrycolumns",params)['OUTPUT']

            # remove duplicate rows
            params = { 
            'FIELDS' : ['Date','User','xcoord','ycoord'], 
            'INPUT' : added_geom, 
            'OUTPUT' : 'memory:' 
            }

            removed_dups=processing.run("native:removeduplicatesbyattribute", params)['OUTPUT']

            # remove generated coordinate columns
            params = {
            'INPUT':removed_dups,
            'COLUMN':['xcoord','ycoord'],
            'OUTPUT':merge_layer_path
            }

            processing.run("native:deletecolumn", params)        
            
            qml_input_path = sub_layer_path.replace(".shp",".qml")
            qml_output_path_2 = merge_layer_path.replace(".shp",".qml")
            shutil.copyfile(qml_input_path,qml_output_path_2)

        # merge and de-duplicate csv files
        for file in csvs.name:
            main_path=self.mynormpath(main_project_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[4]+'/'+file+'.csv')
            sub_path=self.mynormpath(sub_project_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[4]+'/'+file+'.csv')
            merge_path=self.mynormpath(merge_project_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[4]+'/'+file+'.csv')

            main=pd.read_csv(main_path,sep=";",encoding="latin_1")
            sub=pd.read_csv(sub_path,sep=";",encoding="latin_1")
            merge=pd.concat([main,sub])
            merge=merge.drop_duplicates()
            merge.to_csv(merge_path,index=False,sep=";")
        self.iface.messageBar().pushMessage("Projects merged, saved in directory" + merge_project_path, level=Qgis.Success, duration=5)

    def virtualStops(self,distance):
        from .dbscan import Basic_DBSCAN
        from datetime import datetime
        # Defines psudo stop numbers based on proximity
        project = QgsProject.instance()
        proj_file_path=project.fileName()
        head_tail = os.path.split(proj_file_path)

        file=[]

        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Bedding_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Dikes-Sills_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Fold and crenulation axial planes_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Fold axes_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Foliation-cleavage_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Fractures_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Lineations_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Shear zones and faults_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Veins_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Metamorphic lithologies_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Plutonic lithologies_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Sedimentary lithologies_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Supergene lithologies_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Volcanic lithologies_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Volcanoclastic lithologies_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Metamorphic lithologies_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Plutonic lithologies_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Sedimentary lithologies_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Supergene lithologies_PT.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Volcanoclastic lithologies_PT.shp"))
        
        # merge two shapefiles
        params = {
        'LAYERS': [file[0],file[1]],
        'OUTPUT': 'memory:'
        }
        print(file[0])
        print(file[1])
        merged_layers=processing.run("native:mergevectorlayers", params )['OUTPUT']
        
        for i,f in enumerate(file):
   
                if(i>1):
                    print(f)
                    # merge two shapefiles
                    params = {
                    'LAYERS': [merged_layers,f],
                    'OUTPUT': 'memory:'
                    }

                    merged_layers=processing.run("native:mergevectorlayers", params )['OUTPUT']
                    


        points=[]
        feats = merged_layers.getFeatures()
        for i,f in enumerate(feats):
            point=f.geometry()
            points.append([point.asPoint().x(), point.asPoint().y()])
        canvas = self.iface.mapCanvas()

        if(canvas.mapUnits()==6): #if lat/long convert to metres, anything else is assuemd to be metres already (not a good idea)
            distance=float(distance)/111139.0   
        scanner = Basic_DBSCAN(eps=float(distance), minPts=1)
        """
        SIP_MONKEYPATCH_COMPAT_NAME 	0        Meters.
        SIP_MONKEYPATCH_COMPAT_NAME 	1        Kilometers.
        SIP_MONKEYPATCH_COMPAT_NAME 	2        Imperial feet.
        SIP_MONKEYPATCH_COMPAT_NAME 	3        Nautical miles.
        SIP_MONKEYPATCH_COMPAT_NAME 	4        Imperial yards.
        SIP_MONKEYPATCH_COMPAT_NAME 	5        Terrestrial miles.
        SIP_MONKEYPATCH_COMPAT_NAME 	6        Degrees, for planar geographic CRS distance measurements.
        SIP_MONKEYPATCH_COMPAT_NAME 	7        Centimeters.
        SIP_MONKEYPATCH_COMPAT_NAME 	8        Millimeters.
        Inches 	9        Inches (since QGIS 3.32)
        SIP_MONKEYPATCH_COMPAT_NAME 10        Unknown distance unit.
        """
        if(len(points)>0):
            X=np.array(points)
            X[0]=(X[0]-X[:,0].mean())/X[:,0].std()
            X[1]=(X[1]-X[:,1].mean())/X[:,1].std()
            #X = StandardScaler().fit_transform(X)


            clusters = scanner.fit_predict(X)
            #print(clusters)
            

            merged_layers.startEditing()
            if merged_layers.dataProvider().fieldNameIndex("v_stop") == -1:
                merged_layers.dataProvider().addAttributes([QgsField("v_stop", QVariant.String)])
                merged_layers.updateFields()

            id_new_col= merged_layers.dataProvider().fieldNameIndex("v_stop")

            for i,feature in enumerate(merged_layers.getFeatures()):
                if(clusters[i]>0):
                    merged_layers.changeAttributeValue(feature.id(), id_new_col, str(clusters[i]))

            merged_layers.commitChanges()
            if not merged_layers.isValid():
                print("Layer failed to build!")
            else:
                QgsProject.instance().addMapLayer(merged_layers,False)
                options = QgsVectorFileWriter.SaveVectorOptions()
                options.driverName = "ESRI Shapefile"
                #options.actionOnExistingFile = QgsVectorFileWriter.CreateOrOverwriteLayer
                options.fileEncoding="UTF8"

                output_path = QgsProject.instance().readPath("./")
                virtual_path = self.mynormpath(output_path+"/0. FIELD DATA/0. CURRENT MISSION/0. STOPS-SAMPLING-PHOTOGRAPHS-COMMENTS/Virtual_Stops_"+datetime.now().strftime('%d-%b-%Y_%H_%M_%S')+".shp" ) # Path to clip rectangle in memory
                writer = QgsVectorFileWriter.writeAsVectorFormatV3 (merged_layers,virtual_path, QgsProject.instance().transformContext(), options )

                if writer[0] != QgsVectorFileWriter.NoError:
                    print("Error occurred while creating shapefile:", writer.errorMessage())
                """
                else:
                    # Write features to the shapefile
                    for feature in layer.getFeatures():
                        writer.addFeature(feature)

                    # Finish writing and close the shapefile
                """
                del writer
                self.iface.addVectorLayer(virtual_path, '', 'ogr')
                self.iface.messageBar().pushMessage("Virtual Stop layer created", level=Qgis.Success, duration=5)
        else:
            self.iface.messageBar().pushMessage("No points found", level=Qgis.Warning, duration=45)

    def rmvLyr(lyrname):
        qinst = QgsProject.instance()
        
        qinst.removeMapLayer(qinst.mapLayersByName(lyrname)[0].id())

    def exportLayers(self):
    # Combines sets of lithology, structure and zoneal layers into 3 shapefiles

        project = QgsProject.instance()
        proj_file_path=project.fileName()
        head_tail = os.path.split(proj_file_path)
        file=[]
        # merge zone data
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Fractured zones_PG.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Brecciated zones_PG.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Cataclastic zones_PG.shp"))
        file.append(self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Alteration zones_PG.shp"))
        output=self.mynormpath(self.dlg.lineEdit_7.text()+"/zonal_data.shp")
        
        """for f in file:
            print(f)
            layer = self.iface.addVectorLayer(f, '', 'ogr')
            # Get layer capabilities
            caps = layer.dataProvider().capabilities()

            # Add Fields
            if caps & QgsVectorDataProvider.AddAttributes:
                res = layer.dataProvider().addAttributes([QgsField('DataType', QVariant.String, "string",50)])
                layer.updateFields()

            #Get indexes of LDC and Fecha fields
            DataType_idx = layer.fields().lookupField('DataType')

            # Change attribute values
            for f in layer.getFeatures():
                head_tail=os.path.split(f)
                DataType = head_tail[1].replace(".shp","")
                layer.dataProvider().changeAttributeValues({f.id(): {DataType_idx: DataType}})
        """
        # merge shapefiles
        params = {
        'LAYERS': [file[0], file[1],file[2],file[3]],
        'OUTPUT': output
        }

        processing.run("native:mergevectorlayers", params )

        # merge lithology data
        file1=self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Metamorphic lithologies_PT.shp")
        file2=self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Plutonic lithologies_PT.shp")
        file3=self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Sedimentary lithologies_PT.shp")
        file4=self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Supergene lithologies_PT.shp")
        file5=self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Volcanic lithologies_PT.shp")
        file6=self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/2. LITHOLOGY/Volcanoclastic lithologies_PT.shp")
        output=self.mynormpath(self.dlg.lineEdit_7.text()+"/litho_data.shp")

        # merge shapefiles
        params = {
        'LAYERS': [file1, file2,file3,file4,file5,file6],
        'OUTPUT': output
        }

        processing.run("native:mergevectorlayers", params )

        # merge lithology data
        file1=self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Bedding_PT.shp")
        file2=self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Dikes-Sills_PT.shp")
        file3=self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Fold and crenulation axial planes_PT.shp")
        file4=self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Fold axes_PT.shp")
        file5=self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Foliation-cleavage_PT.shp")
        file6=self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Fractures_PT.shp")
        file7=self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Lineations_PT.shp")
        file8=self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Shear zones and faults_PT.shp")
        file9=self.mynormpath(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/1. STRUCTURES/Veins_PT.shp")
        output=self.mynormpath(self.dlg.lineEdit_7.text()+"/structure_data.shp")

        # merge shapefiles
        params = {
        'LAYERS': [file1, file2,file3,file4,file5,file6,file7,file8,file9],
        'OUTPUT': output
        }

        processing.run("native:mergevectorlayers", params )
        self.iface.messageBar().pushMessage("Layers merged, saved in directory" + self.dlg.lineEdit_7.text(), level=Qgis.Success, duration=5)
    
    def mynormpath(self,path):
        return(os.path.normpath(path).replace("\\","/"))

    def updateProjectTitle(self):
        project = QgsProject.instance()
        new_title=self.dlg.lineEdit_9.text()+"/"+self.dlg.lineEdit_10.text()
        project.setTitle(new_title)
        project.write()
        self.iface.messageBar().pushMessage("Project title updated to " + new_title, level=Qgis.Success, duration=5)

    def clipToCanvas(self):
    # Clips all WAXI QFIELD vector layers to current canvas and 
    # saves out layers in a new directory

        dirs=["0. STOPS-SAMPLING-PHOTOGRAPHS-COMMENTS","1. STRUCTURES","2. LITHOLOGY","3. GEOPHYSICAL MEASUREMENTS","99. CSV FILES"]
        e = self.iface.mapCanvas().extent()  
        extent = QgsRectangle(e.xMinimum(), e.yMinimum(), e.xMaximum(), e.yMaximum())  # Replace with the desired extents
        shp_list=self.mynormpath(os.path.dirname(os.path.realpath(__file__))+"/shp.csv")
        #csv_list=self.mynormpath(os.path.dirname(os.path.realpath(__file__))+"/csv.csv")

        shps=pd.read_csv(shp_list,names=['name','dir_code'])
        shps=shps.set_index("name")
        
        #csvs=pd.read_csv(csv_list,names=['name'])

        geom = QgsGeometry().fromRect(extent)

        ftr = QgsFeature()
        ftr.setGeometry(geom)

        #Define your Coordinate Reference System here
        project = QgsProject.instance()
        crs = project.crs()

        layer = QgsVectorLayer('Polygon?{}'.format(crs), 'Test_polygon','memory')

        with edit(layer):
            layer.addFeature(ftr)


        # Specify the output file path for the shapefile 

        output_path = self.mynormpath(self.dlg.lineEdit_3.text()).strip()

        
        if(not os.path.exists(self.mynormpath(output_path))):
            os.mkdir(self.mynormpath(output_path))
        if(not os.path.exists(self.mynormpath(output_path+"/0. FIELD DATA"))):
            os.mkdir(self.mynormpath(output_path+"/0. FIELD DATA"))
        if(not os.path.exists(self.mynormpath(output_path+"/0. FIELD DATA/0. CURRENT MISSION"))):
            os.mkdir(self.mynormpath(output_path+"/0. FIELD DATA/0. CURRENT MISSION"))
        if(not os.path.exists(self.mynormpath(output_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[0]))):
            os.mkdir(self.mynormpath(output_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[0]))
        if(not os.path.exists(self.mynormpath(output_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[1]))):
            os.mkdir(self.mynormpath(output_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[1]))
        if(not os.path.exists(self.mynormpath(output_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[2]))):
            os.mkdir(self.mynormpath(output_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[2]))
        if(not os.path.exists(self.mynormpath(output_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[3]))):
            os.mkdir(self.mynormpath(output_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[3]))
            
        # Prepare the output shapefile parameters


        options = QgsVectorFileWriter.SaveVectorOptions()
        options.driverName = "ESRI Shapefile"
        #options.actionOnExistingFile = QgsVectorFileWriter.CreateOrOverwriteLayer
        options.fileEncoding="UTF8"

        # Create the vector file writer instance
        if(os.path.exists(self.dlg.lineEdit_8.text())):
            overlay_path=self.dlg.lineEdit_8.text()
        elif(self.dlg.lineEdit_8.text() and not os.path.exists(self.dlg.lineEdit_8.text())):
            self.iface.messageBar().pushMessage("Layer Failed to load clip polygon: "+self.dlg.lineEdit_8.text() , level=Qgis.Warning, duration=15)
            return
        else:
            overlay_path = self.mynormpath(output_path+"/0. FIELD DATA/0. CURRENT MISSION/0. STOPS-SAMPLING-PHOTOGRAPHS-COMMENTS/cliprect.shp")  # Path to clip rectangle in memory
            writer = QgsVectorFileWriter.writeAsVectorFormatV3 (layer,overlay_path, QgsProject.instance().transformContext(), options )

            if writer[0] != QgsVectorFileWriter.NoError:
                print("Error occurred while creating shapefile:", writer.errorMessage())
            """
            else:
                # Write features to the shapefile
                for feature in layer.getFeatures():
                    writer.addFeature(feature)

                # Finish writing and close the shapefile
            """
            del writer
        
        for layer in project.mapLayers().values():
            # Check if the layer name matches the target name
            if layer.name() in shps.index.tolist():   
                # Get the file path of the layer

                input_path = self.mynormpath(layer.dataProvider().dataSourceUri())
                output_path_2=self.mynormpath("/0. FIELD DATA/0. CURRENT MISSION/"+dirs[int(shps.loc[layer.name()].dir_code)]+"/")

                ### REDO output_path as output_dir + input_filename.shp
                processing.run("native:clip", {   
                    'INPUT': input_path,   
                    'OUTPUT': self.mynormpath(output_path+output_path_2+'/'+layer.name()+".shp"),   
                    'OVERLAY': overlay_path   
                })   

                qml_input_path = input_path.replace(".shp",".qml")
                qml_output_path_2 = output_path+output_path_2+'/'+layer.name()+".shp".replace(".shp",".qml")
                shutil.copyfile(qml_input_path,qml_output_path_2)
        
        project = QgsProject.instance()
        proj_file_path=project.fileName()
        head_tail = os.path.split(proj_file_path)
        qml_input_path = head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/0. STOPS-SAMPLING-PHOTOGRAPHS-COMMENTS/Stops_PT_autoinc.qml"
        qml_output_path_2 = output_path+'/0. FIELD DATA/0. CURRENT MISSION/0. STOPS-SAMPLING-PHOTOGRAPHS-COMMENTS//Stops_PT_autoinc.qml'
        shutil.copyfile(qml_input_path,qml_output_path_2)
        qml_input_path = head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/0. STOPS-SAMPLING-PHOTOGRAPHS-COMMENTS/Stops_PT_no_autoinc.qml"
        qml_output_path_2 = output_path+'/0. FIELD DATA/0. CURRENT MISSION/0. STOPS-SAMPLING-PHOTOGRAPHS-COMMENTS/Stops_PT_no_autoinc.qml'
        shutil.copyfile(qml_input_path,qml_output_path_2)

        if(not os.path.exists(self.mynormpath(output_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[4]))):
            src_path=os.path.split(self.mynormpath(input_path))
            src_path=self.mynormpath(src_path[0]+"/../"+dirs[4])
            dst_path=self.mynormpath(output_path+"/0. FIELD DATA/0. CURRENT MISSION/"+dirs[4]+"/")

            shutil.copytree(src_path, dst_path)

        #proj_file_path=project.fileName()
        #head_tail = os.path.split(proj_file_path)
        #shutil.copyfile(self.mynormpath(proj_file_path), self.mynormpath(output_path+'/'+head_tail[1]))

        self.iface.messageBar().pushMessage("Files clipped to current extent, saved in directory" + output_path, level=Qgis.Success, duration=5)

    def addCsvItem(self):
    # adds a single vaue/description pair to any csv file in the WAXI QFIELD template

        csv_list = self.mynormpath(os.path.dirname(os.path.realpath(__file__))+"/csv.csv")
        csvs=pd.read_csv(csv_list,names=['name'])
        csv_file_list=[]
        for name in csvs.name:
            csv_file_list.append(name)

        value = self.dlg.lineEdit.text()
        description = self.dlg.lineEdit_2.text()
        layer_name=csv_file_list[self.dlg.comboBox.currentIndex()]
        project = QgsProject.instance()

        layer = project.mapLayersByName(layer_name)
        group = QgsProject.instance().layerTreeRoot()

        if len(layer) > 0:
            # Remove the layer from the project
            for layer in project.mapLayers().values():
                # Check if the layer name matches the target name

                if (layer.name() == layer_name and layer_name != 'Type-Lithologies' and layer_name != 'Lithologies'):
                    
                    # Get the file path of the layer
                    file_path = self.mynormpath(layer.dataProvider().dataSourceUri())
                    head_tail=os.path.split(file_path)
                    QgsProject.instance().removeMapLayer(layer)

                    User_List= pd.read_csv(file_path,encoding="latin_1",sep=";")
                    User_List.loc[str(len(User_List))] = [value,description]
                    User_List.to_csv(file_path,index=False,sep=";",encoding="latin_1")

                    if('lithologies' in layer_name):
                        User_List= pd.read_csv(head_tail[0]+"/Lithologies.csv",encoding="latin_1",sep=";")
                        User_List.loc[str(len(User_List))] = [value,value]
                        User_List.to_csv(head_tail[0]+"/Lithologies.csv",index=False,sep=";",encoding="latin_1")

                        User_List= pd.read_csv(head_tail[0]+"/Type-Lithologies.csv",encoding="latin_1",sep=";")
                        User_List.loc[str(len(User_List))] = [layer_name.split(" ")[0],value]
                        User_List.to_csv(head_tail[0]+"/Type-Lithologies.csv",index=False,sep=";",encoding="latin_1")

                    updated_layer = QgsVectorLayer(file_path, layer_name, "ogr")
                    if updated_layer.isValid():

                        # Add the updated layer to the project
                        QgsProject.instance().addMapLayer(updated_layer,False)
                        group = QgsProject.instance().layerTreeRoot().findGroup("CSV FILES")
                        
                        if group:

                            # Add the layer to the new group
                            group.addLayer(updated_layer)
                            self.iface.messageBar().pushMessage("Item "+value+" "+description+" added to "+layer_name, level=Qgis.Success, duration=15)

                    else:
                        self.iface.messageBar().pushMessage("Layer Failed to load updated layer: "+layer_name, level=Qgis.Warning, duration=15)
                    break  # Stop iterating once the layer is found
        else:
            self.iface.messageBar().pushMessage("Layer not found: "+layer_name, level=Qgis.Warning, duration=45)


    
    def select_dst_directory(self):
        filename = QFileDialog.getExistingDirectory(None, "Select Folder")

        self.dlg.lineEdit_3.setText(filename)
    
    def select_directory(self,widget,prompt):
        filename = QFileDialog.getExistingDirectory(None, prompt)

        widget.setText(filename)

    def select_main_directory(self):
        filename = QFileDialog.getExistingDirectory(None, "Select Main Project Folder")

        self.dlg.lineEdit_4.setText(filename)
    
    def select_sub_directory(self):
        filename = QFileDialog.getExistingDirectory(None, "Select Sub-Project Folder")

        self.dlg.lineEdit_5.setText(filename)
    
    def select_merged_directory(self):
        filename = QFileDialog.getExistingDirectory(None, "Select Destination Merged Folder")

        self.dlg.lineEdit_6.setText(filename)

    def select_export_directory(self):
        filename = QFileDialog.getExistingDirectory(None, "Select Export Folder")

        self.dlg.lineEdit_7.setText(filename)

    def select_clip_poly(self):
        filename, _filter = QFileDialog.getOpenFileName(None, "Select Clip Polygon")
        
        self.dlg.lineEdit_8.setText(filename)


    def toggleAutoInc(self):
        project = QgsProject.instance()
        proj_file_path=project.fileName()
        head_tail = os.path.split(proj_file_path)
        current_file_name = head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/0. STOPS-SAMPLING-PHOTOGRAPHS-COMMENTS/Stops_PT.qml"
        os.remove(current_file_name)

        no_auto_filename = head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/0. STOPS-SAMPLING-PHOTOGRAPHS-COMMENTS/Stops_PT_no_autoinc.qml"
        auto_filename = head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/0. STOPS-SAMPLING-PHOTOGRAPHS-COMMENTS/Stops_PT_autoinc.qml"
        if(self.dlg.radioButton.isChecked()):
            shutil.copy(auto_filename,current_file_name)
            self.iface.messageBar().pushMessage("Auto Incrementing Stop Numbers turned ON", level=Qgis.Success, duration=15)

        else:
            shutil.copy(no_auto_filename,current_file_name)
            self.iface.messageBar().pushMessage("Auto Incrementing Stop Numbers turned OFF", level=Qgis.Success, duration=15)
        
        layer = project.mapLayersByName('Stops_PT')[0]
        layer.loadNamedStyle(head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/0. STOPS-SAMPLING-PHOTOGRAPHS-COMMENTS/Stops_PT.qml")
        layer.triggerRepaint()
        
    def set_gtCircles(self):
        
        project = QgsProject.instance()
        proj_file_path=project.fileName()
        head_tail = os.path.split(proj_file_path)

        gtCircles_flag_path = head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/0. STOPS-SAMPLING-PHOTOGRAPHS-COMMENTS/gtCircles_flag.txt"

        if(self.dlg.gtCircles_checkBox.isChecked()):
            f = open(gtCircles_flag_path, "a+")
            f.close()
        else:
            if(os.path.exists(gtCircles_flag_path)):
                os.remove(gtCircles_flag_path)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&WAXI_QF'),
                action)
            self.iface.removeToolBarIcon(action)

    def define_tips(self):
        Value_tooltip = '<p>Value of Item to be stored in csv File selected from List Name dropdown menu.</p>'
        Description_tooltip = '<p>Additional info for Item to be stored in csv File selected from List Name dropdown menu.</p>'
        Clip_Polygon_tooltip = '<p>Path to clipping polygon shapefile- Leave blank if you want to use the current QGIS Canvas rectangle.</p>'
        Clip_path_tooltip = '<p>Path to new clipped QGIS project directory.</p>'
        Export_path_tooltip = '<p>Path to directory to store combined layers.</p>'
        Proj_name_tooltip = '<p>Name of Project, e.g. Username & date.</p>'
        Proj_region_tooltip = '<p>Region project applies to e.g. Sefwi Belt.</p>'
        Merge_main_tooltip = '<p>Path to directory of global QGIS Project.</p>'
        Merge_sub_tooltip = '<p>Path to directory of local QGIS Project.</p>'
        Merge_output_tooltip = '<p>Path to directory of newly merged QGIS Project.</p>'
        Csv_list_tooltip = 'Select CSV file to add item to'
        Epsilon_tooltip = 'The radius of the circle to be created around each data point to check the density (in metres)'
        Auto_on = 'Turn on autoincrementing of Stop Number behaviour when a new Stop is added'
        Auto_off = 'Turn off autoincrementing of Stop Number behaviour when a new Stop is added'

        Clip_tooltip='Select the checkbox below and provide an output path (and optional clipping polygon) \nto clip the all WAXI QFIELD layers of current project, retaining directory structure. \nIf no polygon is defined, it will clip to the current Canvas (field of view) of the open project'
        Add_item_tooltip='Select the checkbox below, chose the CSV file you want to add to, and define the \nValue & Description for a new field that will appear in the dropdown menus in QFIELD'
        Export_tooltip='Select the checkbox below and provide an output path to combine similar layers into \none of three shapefiles (structure polygons, structure points and lithologies)'
        Update_tooltip='Select the checkbox below and provide new Name and Region info for project'
        Merge_tooltip='Select the checkbox below and provide paths to the global QGIS project, \nthe local one you have been working on and the output directory that\n will store the merged projects, with duplicates removed.'
        Virtualstop_tooltip = 'Combine all point layers to get virtual Stop IDS'
        Autoincrement_tooltip= 'Select the checkbox below and toggle autoincrementing of Stop Number behaviour when a new Stop is added'

        gtCircles_tooltip= 'Select Checkbox to switch to Great Circle Display for Stereonet Plugin'

        self.dlg.label_4.setToolTip(Clip_tooltip)
        self.dlg.label_5.setToolTip(Add_item_tooltip)
        self.dlg.label_10.setToolTip(Export_tooltip)
        self.dlg.label_15.setToolTip(Update_tooltip)
        self.dlg.label_6.setToolTip(Merge_tooltip)
        self.dlg.label_18.setToolTip(Virtualstop_tooltip)
        self.dlg.label_19.setToolTip(Autoincrement_tooltip)
        self.dlg.label_22.setToolTip(gtCircles_tooltip)

        self.dlg.radioButton.setToolTip(Auto_on)
        self.dlg.radioButton_2.setToolTip(Auto_off)


        self.dlg.lineEdit.setToolTip(Value_tooltip)
        self.dlg.lineEdit_2.setToolTip(Description_tooltip)

        self.dlg.lineEdit_8.setToolTip(Clip_Polygon_tooltip)
        self.dlg.pushButton_6.setToolTip(Clip_Polygon_tooltip)

        self.dlg.lineEdit_3.setToolTip(Clip_path_tooltip)
        self.dlg.pushButton.setToolTip(Clip_path_tooltip)

        self.dlg.lineEdit_7.setToolTip(Export_path_tooltip)
        self.dlg.pushButton_5.setToolTip(Export_path_tooltip)

        self.dlg.lineEdit_9.setToolTip(Proj_name_tooltip)
        self.dlg.lineEdit_10.setToolTip(Proj_region_tooltip)

        self.dlg.lineEdit_4.setToolTip(Merge_main_tooltip)
        self.dlg.pushButton_2.setToolTip(Merge_main_tooltip)

        self.dlg.lineEdit_5.setToolTip(Merge_sub_tooltip)
        self.dlg.pushButton_3.setToolTip(Merge_sub_tooltip)

        self.dlg.lineEdit_6.setToolTip(Merge_output_tooltip)
        self.dlg.pushButton_4.setToolTip(Merge_output_tooltip)

        self.dlg.lineEdit_11.setToolTip(Epsilon_tooltip)


        self.dlg.gtCircles_checkBox.setToolTip(gtCircles_tooltip)
        self.dlg.stereonet_checkBox.setToolTip(gtCircles_tooltip)



    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        project = QgsProject.instance()
        proj_file_path=project.fileName()
        head_tail = os.path.split(proj_file_path)

        current_file_name = head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/0. STOPS-SAMPLING-PHOTOGRAPHS-COMMENTS/Stops_PT.qml"

        if(not os.path.exists(current_file_name)):
            self.iface.messageBar().pushMessage("ERROR: A WAXI QFIELD Project Should be Loaded before using this plugin", level=Qgis.Critical, duration=45)
        else:

            if self.first_start == True:
                self.first_start = False
                self.dlg = WAXI_QFDialog()
                self.dlg.pushButton.clicked.connect(self.select_dst_directory)
                self.dlg.pushButton_2.clicked.connect(self.select_main_directory)
                self.dlg.pushButton_3.clicked.connect(self.select_sub_directory)
                self.dlg.pushButton_4.clicked.connect(self.select_merged_directory)
                self.dlg.pushButton_5.clicked.connect(self.select_export_directory)
                self.dlg.pushButton_6.clicked.connect(self.select_clip_poly)

                # create dropdown list of all csv files
                csv_list = self.mynormpath(os.path.dirname(os.path.realpath(__file__))+"/csv.csv")
                csvs=pd.read_csv(csv_list,names=['name'])
                csv_file_list=[]
                for name in csvs.name:
                    csv_file_list.append(name)
                self.dlg.comboBox.addItems(csv_file_list[:-2])

                #check to see which qml is loaded for Stops_PT
                no_auto_filename = head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/0. STOPS-SAMPLING-PHOTOGRAPHS-COMMENTS/Stops_PT_no_autoinc.qml"

                if(os.path.exists(current_file_name)):
                    file_stats_current = os.stat(current_file_name)
                    file_stats_no_auto = os.stat(no_auto_filename)
                    if(file_stats_current.st_size == file_stats_no_auto.st_size):
                        self.dlg.radioButton_2.setChecked(True)
                    else:
                        self.dlg.radioButton.setChecked(True)

                gtCircles_flag_path = head_tail[0]+"/0. FIELD DATA/0. CURRENT MISSION/0. STOPS-SAMPLING-PHOTOGRAPHS-COMMENTS/gtCircles_flag.txt"

                if(os.path.exists(gtCircles_flag_path)):
                    self.dlg.gtCircles_checkBox.setChecked(True)


                self.define_tips()
                # show the dialog
                self.dlg.show()



            # Run the dialog event loop
            result = self.dlg.exec_()

            # See if OK was pressed
            if result:

                if(self.dlg.lineEdit.text() and self.dlg.csv_checkBox.isChecked()):
                    self.addCsvItem()

                if(self.dlg.clip_checkBox.isChecked()):
                    if(os.path.exists(self.mynormpath(self.dlg.lineEdit.text()))):
                        self.clipToCanvas()
                    else:
                        self.iface.messageBar().pushMessage("Directory not found: "+self.dlg.lineEdit_3.text(), level=Qgis.Warning, duration=45)

                if(self.dlg.merge_checkBox.isChecked()):
                    if(os.path.exists(self.mynormpath(self.dlg.lineEdit_4.text())) and 
                    os.path.exists(self.mynormpath(self.dlg.lineEdit_5.text())) and 
                    os.path.exists(self.mynormpath(self.dlg.lineEdit_6.text()))):
                            self.mergeProjects()
                    else:
                        self.iface.messageBar().pushMessage("Directory not found", level=Qgis.Warning, duration=45)  

                if(self.dlg.export_checkBox.isChecked()):
                    if(os.path.exists(self.mynormpath(self.dlg.lineEdit_7.text()))):
                        self.exportLayers()
                    else:
                        self.iface.messageBar().pushMessage("Directory not found: "+self.dlg.lineEdit_7.text(), level=Qgis.Warning, duration=45)

                if(self.dlg.projName_checkBox.isChecked()):
                    if(self.dlg.lineEdit_9.text() and self.dlg.lineEdit_10.text()):
                        self.updateProjectTitle()

                if(self.dlg.virtual_checkBox.isChecked()):
                    if(self.dlg.lineEdit_11.text()):
                        self.virtualStops(self.dlg.lineEdit_11.text())

                if(self.dlg.autoinc_checkBox.isChecked()):
                    self.toggleAutoInc()

                if(self.dlg.stereonet_checkBox.isChecked()):
                    self.set_gtCircles()
            else:
                self.dlg.lineEdit.setText("") 
                self.dlg.lineEdit_2.setText("") 
                self.dlg.lineEdit_3.setText("") 
                self.dlg.lineEdit_4.setText("") 
                self.dlg.lineEdit_5.setText("") 
                self.dlg.lineEdit_6.setText("") 
                self.dlg.lineEdit_7.setText("") 
                self.dlg.lineEdit_8.setText("") 
                self.dlg.lineEdit_9.setText("") 
                self.dlg.lineEdit_10.setText("") 
                self.dlg.lineEdit_11.setText("") 
                self.dlg.clip_checkBox.setChecked(False)
                self.dlg.autoinc_checkBox.setChecked(False)
                self.dlg.clip_checkBox.setChecked(False)
                self.dlg.csv_checkBox.setChecked(False)
                self.dlg.export_checkBox.setChecked(False)
                self.dlg.merge_checkBox.setChecked(False)
                self.dlg.projName_checkBox.setChecked(False)
                self.dlg.virtual_checkBox.setChecked(False)
                self.dlg.stereonet_checkBox.setChecked(False)
            